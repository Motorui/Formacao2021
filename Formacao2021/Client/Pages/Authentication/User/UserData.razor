@page "/users"

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject HttpClient client
@inject IJSRuntime js

<AuthorizeView Context="authContext">
    <Authorized>
        <Container Fluid="true">
            <Breadcrumb Mode="BreadcrumbMode.Auto">
                <BreadcrumbItem>
                    <BreadcrumbLink To="">Início</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem>
                    <BreadcrumbLink To="users">Utilizadores</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
            <Row>
                <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                    <Card>
                        <CardBody>
                            <CardTitle Size="5">Utilizadores</CardTitle>
                            <CardText>
                                <SpinLoader IsLoading="@(users == null)">
                                    <LoadingTemplate>
                                        <div class="modal-overlay">
                                            <Chase Color="#ff0000" Size="60px" Center="true" />
                                        </div>
                                    </LoadingTemplate>
                                    <ContentTemplate>
                                        @if (users.Length == 0)
                                        {
                                            <text>Não foram encontrados utilizadores na base de dados</text>
                                        }
                                        else
                                        {
                                            <Table Striped="true" Bordered="true" Hoverable="true" FullWidth="false" Responsive="true">
                                                <TableHeader ThemeContrast="ThemeContrast.Light">
                                                    <TableRow>
                                                        @if (@authContext.User.IsInRole("temp")) //substituir por Admins
                                                        {

                                                        }
                                                        <TableHeaderCell>Menu</TableHeaderCell>
                                                        <TableHeaderCell>Username</TableHeaderCell>
                                                        <TableHeaderCell>Nome</TableHeaderCell>
                                                        <TableHeaderCell>Email</TableHeaderCell>
                                                        <TableHeaderCell>Função</TableHeaderCell>
                                                        <TableHeaderCell>UH'S</TableHeaderCell>
                                                    </TableRow>
                                                </TableHeader>
                                                <TableBody>
                                                    @foreach (var user in users)
                                                    {
                                                    <TableRow>
                                                        <TableRowCell>
                                                            <Tooltip Text="Editar Utilizador">
                                                                <Button Color="Color.Info" Clicked="@(() => PrepareForEdit(user))"
                                                                        data-toggle="modal" data-target="#userModal">
                                                                    <Icon Name="IconName.Edit" />
                                                                </Button>
                                                            </Tooltip>
                                                            <Tooltip Text="Apagar Utilizador">
                                                                <Button Color="Color.Danger" Clicked="@(() => PrepareForDelete(user.Id))"
                                                                        data-toggle="modal" data-target="#confirmDeleteModal">
                                                                    <Icon Name="IconName.Delete" />
                                                                </Button>
                                                            </Tooltip>
                                                        </TableRowCell>
                                                        <TableRowCell>@user.UserName</TableRowCell>
                                                        <TableRowCell>@user.Name</TableRowCell>
                                                        <TableRowCell>@user.Email</TableRowCell>
                                                        <TableRowCell>
                                                            @{var listRoles = userRoles.Where(i => i.UserId == user.Id);}
                                                            @foreach (var r in listRoles)
                                                            {
                                                                <p>
                                                                    @{ var roleName = roleList.Where(i => i.Id == r.RoleId).Select(n => n.Name).FirstOrDefault().ToString();}
                                                                    <Badge Color="Color.Secondary">@roleName</Badge>
                                                                </p>
                                                            }
                                                        </TableRowCell>
                                                        <TableRowCell>
                                                            @{var listUhs = userUhs.Where(i => i.UserId == user.Id);}
                                                            @foreach (var u in listUhs)
                                                            {
                                                                var uhIata = uhsList.Where(i => i.UhID == u.UhID).Select(n => n.UhNome).FirstOrDefault().ToString();
                                                                <Badge Color="Color.Info">@uhIata</Badge>
                                                            }
                                                        </TableRowCell>
                                                    </TableRow>
                                                    }
                                                </TableBody>
                                            </Table>
                                        }
                                    </ContentTemplate>
                                    <FaultedContentTemplate>

                                        <text>ERRO!</text>

                                    </FaultedContentTemplate>
                                </SpinLoader>
                            </CardText>
                            <CardFooter>
                                <Tooltip Text="Criar novo utilizador">
                                    <Button Color="Color.Success" Clicked="@(() => PrepareToAdd())"
                                            data-toggle="modal" data-target="#userModal">
                                        Criar <Icon Name="IconName.Add" />
                                    </Button>
                                </Tooltip>
                            </CardFooter>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </Container>

        <ConfirmDialog OnClick="@Delete">
            <ConfirmText>
                <p>Deseja de apagar o utilizador @itemToDelete ?</p>
                <p>Não será possível recuperar este utilizador!</p>
            </ConfirmText>
        </ConfirmDialog>
        <UserModal ModelUser=modelUser DataChanged="@DataChanged"
                   UhList=uhsList RoleList=roleList
                   UserRoles=userRoles UserUhs=userUhs
                   IsEdit="@isEdit">
            <CustomHeader>@customHeader</CustomHeader>
        </UserModal>

    </Authorized>
    <NotAuthorized>
        <p>Não está logado.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    RegisterUser[] users { get; set; }
    RegisterRoles[] roleList { get; set; }
    RegisterUserRole[] userRoles { get; set; }
    RegisterUserUh[] userUhs { get; set; }
    Uh[] uhsList { get; set; }

    RegisterUser modelUser = new RegisterUser();
    Guid UserToDelete { get; set; }
    string itemToDelete = string.Empty;
    string customHeader = string.Empty;
    bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        users = await client.GetFromJsonAsync<RegisterUser[]>("api/auth/get");
        roleList = await client.GetFromJsonAsync<RegisterRoles[]>("api/auth/getroles");
        userRoles = await client.GetFromJsonAsync<RegisterUserRole[]>("api/auth/getuserroles");
        userUhs = await client.GetFromJsonAsync<RegisterUserUh[]>("api/auth/getuseruhs");
        uhsList = await client.GetFromJsonAsync<Uh[]>("api/Uh");
    }

    private async void DataChanged()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    private void PrepareToAdd()
    {
        modelUser = new RegisterUser();
        customHeader = "Adicionar Utilizador";
        isEdit = false;
    }

    private void PrepareForEdit(RegisterUser user)
    {
        customHeader = "Editar Utilizador";
        modelUser = user;
        isEdit = true;
    }

    private void PrepareForDelete(Guid userId)
    {
        UserToDelete = userId;
    }

    async Task Delete()
    {
        //faltam apagar uhs e roles
        var response = await client.DeleteAsync($"api/auth/delete/{UserToDelete}");
        if (response.IsSuccessStatusCode)
        {
            await client.DeleteAsync($"api/auth/deleteuseruhs/{UserToDelete}");
            await client.DeleteAsync($"api/auth/deleteuserroles/{UserToDelete}");
        }

        await js.InvokeAsync<object>("global.closeModal", "confirmDeleteModal");

        await Task.Delay(100);
        Toaster.Error("Utilizador apagado com sucesso", "Sucesso!");

        await OnInitializedAsync();
    }
}
