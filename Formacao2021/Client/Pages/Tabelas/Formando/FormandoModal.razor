@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject HttpClient http
@inject IJSRuntime js

<Modal @ref="@Modal" role="dialog" id="formandoModal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@CustomHeader</ModalTitle>
            <CloseButton Clicked="@(() => CloseModal("formandoModal"))" />
        </ModalHeader>
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
            <ModalBody>
                <DataAnnotationsValidator />
                <input type="hidden" @bind-value="@Model.ID" />
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Nome</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit @bind-Text="@Model.Nome">
                            <FieldHelp>Inserir nome do curso</FieldHelp>
                        </TextEdit>
                        <ValidationMessage For="@(() => Model.Nome)" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Interno?</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <RadioGroup TValue="bool" Name="interno" @bind-CheckedValue="@Model.Interno">
                            <Radio TValue="bool" Value="@true">Interno</Radio>
                            <Radio TValue="bool" Value="@false">Externo</Radio>
                        </RadioGroup>
                        <ValidationMessage For="@(() => Model.Interno)" />
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Empresa</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        @if (empresas != null)
                        {
                            <Select TValue="Guid?" @bind-SelectedValue="@Model.EmpresaID">
                                <SelectItem Value="@Guid.Empty">Selecionar</SelectItem>
                                @foreach (var emp in empresas)
                                {
                                    <SelectItem Value="@emp.ID">@emp.Nome</SelectItem>
                                }
                                <FieldHelp>por favor selecionar a empresa</FieldHelp>
                            </Select>
                        }
                    </FieldBody>
                </Field>
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">Departamento</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        @if (departamentos != null)
                        {
                            <Select TValue="Guid?" @bind-SelectedValue="@Model.DepartamentoID">
                                <SelectItem Value="@Guid.Empty">Selecionar</SelectItem>
                                @foreach (var dep in departamentos)
                                {
                                    <SelectItem Value="@dep.ID">@dep.Nome</SelectItem>
                                }
                                <FieldHelp>por favor selecionar o departamento</FieldHelp>
                            </Select>
                        }
                    </FieldBody>
                </Field>

            </ModalBody>
            <ModalFooter>
                <Tooltip Text="Gravar">
                    <Button Color="Color.Success" Type="ButtonType.Submit">
                        <Icon Name="IconName.Save" /> Submeter
                    </Button>
                </Tooltip>
                <Tooltip Text="Fechar">
                    <Button Color="Color.Warning" Clicked="@(() => CloseModal("formandoModal"))">
                        <Icon Name="IconName.StepBackward" /> Cancelar
                    </Button>
                </Tooltip>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@code{
    private Modal Modal;
    [Parameter] public Action DataChanged { get; set; }
    [Parameter] public RenderFragment CustomHeader { get; set; }
    [Parameter] public Formando Model { get; set; }
    Empresa[] empresas;
    Departamento[] departamentos;

    protected override async Task OnInitializedAsync()
    {
        empresas = await http.GetFromJsonAsync<Empresa[]>("api/empresa");
        departamentos = await http.GetFromJsonAsync<Departamento[]>("api/departamento");
    }

    private async void HandleValidSubmit()
    {
        if (Model.ID == Guid.Empty)
        {
            await http.PostAsJsonAsync("api/formando", Model);
            Toaster.Success("Curso adicionado com sucesso", "Sucesso!");
        }
        else
        {
            await http.PutAsJsonAsync("api/formando", Model);
            Toaster.Info("Curso editado com sucesso", "Sucesso!");
        }

        await CloseModal("formandoModal");
        DataChanged?.Invoke();
    }

    private async Task CloseModal(string modalId)
    {
        await js.InvokeAsync<object>("global.closeModal", modalId);
    }
}