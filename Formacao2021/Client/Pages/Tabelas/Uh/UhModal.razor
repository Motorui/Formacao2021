@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject HttpClient http
@inject IJSRuntime js

<Modal @ref="@Modal" role="dialog" id="uhModal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@CustomHeader</ModalTitle>
            <CloseButton Clicked="@(() => CloseModal("uhModal"))" />
        </ModalHeader>
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
            <ModalBody>
                <DataAnnotationsValidator />
                <input type="hidden" @bind-value="@Model.UhID" />
                <Field>
                    <FieldLabel>Nome</FieldLabel>
                    <TextEdit @bind-Text="@Model.UhNome" MaxLength="25">
                        <FieldHelp>Inserir nome da unidade de handling</FieldHelp>
                    </TextEdit>
                    <ValidationMessage For="@(() => Model.UhNome)" />
                </Field>
                <Field>
                    <FieldLabel>IATA</FieldLabel>
                    <TextEdit @bind-Text="@Model.UhIATA" MaxLength="3">
                        <FieldHelp>Inserir o código IATA</FieldHelp>
                    </TextEdit>
                    <ValidationMessage For="@(() => Model.UhIATA)" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Tooltip Text="Gravar">
                    <Button Color="Color.Success" Type="ButtonType.Submit">
                        <Icon Name="IconName.Save" /> Submeter
                    </Button>
                </Tooltip>
                <Tooltip Text="Fechar">
                    <Button Color="Color.Warning" Clicked="@(() => CloseModal("uhModal"))">
                        <Icon Name="IconName.StepBackward" /> Cancelar
                    </Button>
                </Tooltip>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@code{
    private Modal Modal;
    [Parameter] public Action DataChanged { get; set; }
    [Parameter] public RenderFragment CustomHeader { get; set; }
    [Parameter] public Uh Model { get; set; }

    private async void HandleValidSubmit()
    {
        if (Model.UhID == Guid.Empty)
        {
            await http.PostAsJsonAsync("api/uh", Model);
            Toaster.Success("UH adicionada com sucesso", "Sucesso!");
        }
        else
        {
            await http.PutAsJsonAsync("api/uh", Model);
            Toaster.Info("UH editada com sucesso", "Sucesso!");
        }

        await CloseModal("uhModal");
        DataChanged?.Invoke();
    }

    private async Task CloseModal(string modalId)
    {
        await js.InvokeAsync<object>("global.closeModal", modalId);
    }
}