@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject HttpClient http
@inject IJSRuntime js

<Modal @ref="@Modal" role="dialog" id="salaModal">
    <ModalBackdrop />
    <ModalContent Centered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@CustomHeader</ModalTitle>
            <CloseButton Clicked="@(() => CloseModal("salaModal"))" />
        </ModalHeader>
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
            <ModalBody>
                <DataAnnotationsValidator />
                <input type="hidden" @bind-value="@Model.ID" />
                <Field>
                    <FieldLabel>Nome</FieldLabel>
                    <TextEdit @bind-Text="@Model.Nome" MaxLength="25">
                        <FieldHelp>Inserir nome da sala</FieldHelp>
                    </TextEdit>
                    <ValidationMessage For="@(() => Model.Nome)" />
                </Field>
                <Field>
                    <FieldLabel>Capacidade</FieldLabel>
                    <NumericEdit TValue="int" @bind-Value="@Model.Capacidade" />
                    <ValidationMessage For="@(() => Model.Capacidade)" />
                </Field>
                <Field>
                    @if (uhs != null)
                    {
                        <FieldLabel>Unidade de Handling</FieldLabel>
                        <Validation Validator="@ValidateUh">
                            <Select TValue="Guid" @bind-SelectedValue="@Model.UhID">
                                <ChildContent>
                                    <SelectItem Value="@Guid.Empty">Selecionar Uh</SelectItem>
                                    @foreach (var uh in uhs)
                                    {
                                        <SelectItem Value="@uh.ID">@uh.IATA</SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError>Por favor selecione uma uh!</ValidationError>
                                </Feedback>
                            </Select>
                        </Validation>
                        <ValidationMessage For="@(() => Model.UhID)" />
                    }
                </Field>
            </ModalBody>
            <ModalFooter>
                <Tooltip Text="Gravar">
                    <Button Color="Color.Success" Type="ButtonType.Submit">
                        <Icon Name="IconName.Save" /> Submeter
                    </Button>
                </Tooltip>
                <Tooltip Text="Fechar">
                    <Button Color="Color.Warning" Clicked="@(() => CloseModal("salaModal"))">
                        <Icon Name="IconName.StepBackward" /> Cancelar
                    </Button>
                </Tooltip>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@code{
    private Modal Modal;
    [Parameter] public Action DataChanged { get; set; }
    [Parameter] public RenderFragment CustomHeader { get; set; }
    [Parameter] public Sala Model { get; set; }
    Uh[] uhs;

    protected override async Task OnInitializedAsync()
    {
        uhs = await http.GetFromJsonAsync<Uh[]>("api/uh");
    }

    private async void HandleValidSubmit()
    {
        if (Model.UhID == Guid.Empty || Model.UhID == null)
        {
            Model.UhID = new Guid("807aeb52-f2d7-4152-8410-a668604a41d4");
        }

        if (Model.ID == Guid.Empty)
        {
            await http.PostAsJsonAsync("api/sala", Model);
            Toaster.Success("Sala criada com sucesso", "Sucesso!");
        }
        else
        {
            await http.PutAsJsonAsync("api/sala", Model);
            Toaster.Info("Sala alterada com sucesso", "Sucesso!");
        }

        await CloseModal("salaModal");
        DataChanged?.Invoke();
    }

    private async Task CloseModal(string modalId)
    {
        await js.InvokeAsync<object>("global.closeModal", modalId);
    }

    void ValidateUh(ValidatorEventArgs e)
    {
        var id = Convert.ToString(e.Value);

        e.Status = id == Guid.Empty.ToString() ? ValidationStatus.Error :
           string.IsNullOrEmpty(id) ?  ValidationStatus.Error : ValidationStatus.Success;
    }
}